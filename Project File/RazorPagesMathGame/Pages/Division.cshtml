@page
@model MathGame.Pages.DivisionModel
@{

    ViewData["Title"] = "Division";

}

@Model.cool = "cool test"
@Model.firstNumber = DivisionMod.genorator.Next(1, 21);
@Model.MultiplesOfFirstNumber = ( ArrayList multiplesOfFirstNumber = new ArrayList();
                for(int x = 2; x <= firstNumber; x++)
                {
                    if(firstNumber % x == 0)
                    {
                        multiplesOfFirstNumber.Add(x);
                    }
                })
@Model.secondNumber = DivisionMod.genorator.Next(1, (multiplesOfFirstNumber[DivisionMod.genoator.Next(1,multiplesOfFirstNumber.Count-1]));

<div class="text-center">
    <h1 class="display-4">Welcome @Model.FirstName</h1>
    <p> Now we are getting somewhere</p>
</div>

<form method="post">
    <h3>@Model.firstNumber / @Model.secondNumber = @Model.answerHolder</h3>
    <input type="text" asp-for="DivisionMod.Answer" placeholder="Answer" />
    <button type="submit">Submit</button>
</form>
<html lang="en">
<body>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/phaser.js" asp-append-version="true"></script>

    <script>


        var config = {
            type: Phaser.AUTO,
            width: 800,
            height: 600,
            physics: {
                default: 'arcade',
                arcade: {
                    gravity: { y: 300 },
                    debug: false
                }
            },
            scene: {
                preload: preload,
                create: create,
                update: update
            }
        };

        var game = new Phaser.Game(config);



        function preload() {
            this.load.image('plus', 'assets/plus.png');
            this.load.image('sky', 'assets/sky.png');
            this.load.image('ground', 'assets/platform.png');
            this.load.image('star', 'assets/star.png');
            this.load.image('bomb', 'assets/bomb.png');
            this.load.spritesheet('dude',
                'assets/dude.png',
                { frameWidth: 32, frameHeight: 48 }
            );
        }

        var platforms;

        function create() {
            this.add.image(400, 300, 'sky');
            this.add.image(400, 200, 'plus');
            platforms = this.physics.add.staticGroup();

            platforms.create(400, 568, 'ground').setScale(2).refreshBody();

            platforms.create(600, 400, 'ground');
            platforms.create(50, 250, 'ground');
            platforms.create(750, 220, 'ground');

            player = this.physics.add.sprite(100, 450, 'dude');

            player.setBounce(0.2);
            player.setCollideWorldBounds(true);

            this.anims.create({
                key: 'left',
                frames: this.anims.generateFrameNumbers('dude', { start: 0, end: 3 }),
                frameRate: 10,
                repeat: -1
            });

            this.anims.create({
                key: 'turn',
                frames: [{ key: 'dude', frame: 4 }],
                frameRate: 20
            });

            this.anims.create({
                key: 'right',
                frames: this.anims.generateFrameNumbers('dude', { start: 5, end: 8 }),
                frameRate: 10,
                repeat: -1
            });
            cursors = this.input.keyboard.createCursorKeys();

        }

        function update() {
            if (cursors.left.isDown) {
                player.setVelocityX(-160);

                player.anims.play('left', true);
            }
            else if (cursors.right.isDown) {
                player.setVelocityX(160);

                player.anims.play('right', true);
            }
            else {
                player.setVelocityX(0);

                player.anims.play('turn');
            }

            if (cursors.up.isDown && player.body.touching.down) {
                player.setVelocityY(-330);
            }
        }


    </script>
</body>
</html>